pipeline {
    agent
    {
      dockerfile {
        args '-u root:root'
        filename 'Dockerfile'
        reuseNode true
      }
    }
    environment  {
        REPO_NAME = 'graphtalk-standard-react'
    }
    stages {
        stage('Git') {
          steps {
            withCredentials([usernamePassword(credentialsId:"pdxc-jenkins", passwordVariable:"GIT_PASSWORD", usernameVariable:"GIT_USER")]) {
              sh "touch ~/.netrc"
              sh "echo 'machine github.dxc.com' >> ~/.netrc"
              sh "echo 'login ${GIT_USER}' >> ~/.netrc"
              sh "echo 'password ${GIT_PASSWORD}' >> ~/.netrc"
              sh "git config --global user.email 'jenkins@dxc.com'"
			  sh "git config --global user.name 'Jenkins User'"
            }
          }
        }
        stage('Check repo name'){
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId:"pdxc-jenkins", passwordVariable:"GIT_PASSWORD", usernameVariable:"GIT_USER")]) {
                        env.GIT_REPO_NAME = env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')                          
                           
                        def check=checkRepoName(env.GIT_REPO_NAME,"${REPO_NAME}");
                        if (!check){
                            error "This pipeline stops here! Please check the environment variables"
                        } 
                    }
                }
            }
        }
        stage('.npmrc') {
          steps {
            // Insert .npmrc
            withCredentials([file(credentialsId: 'npmrc', variable: 'CONFIG')]) {
                sh "touch ~/.npmrc"
                sh "echo '//registry.npmjs.org/:always-auth=false' >> ~/.npmrc"
                sh '''
                    cat ${CONFIG} >> ~/.npmrc
                '''
                sh '''
                    cat ~/.npmrc
                '''
            }
          }
        }
        stage('Installing dependencies') {
            steps {
                sh '''
                    npm install
                '''
            }
        }
        stage('Build') {
            steps {
                sh '''
                    npm run build
                '''
            }
        }
        stage ('Zipping Artifact from DEV') {
            when { branch 'development' }
            steps {
                sh '''
                    rm -rf build.zip
                '''
                zip zipFile: 'build.zip', archive: false, dir: 'build'
            }
        }
        stage('Upload Artifact') {
            when { expression {BRANCH_NAME == 'development' | BRANCH_NAME == 'master'}}
            steps {
                withCredentials([usernamePassword(credentialsId:"diaas-rw", passwordVariable:"ARTIF_PASSWORD", usernameVariable:"ARTIF_USER")]) {
                  sh '''
                      curl -u${ARTIF_USER}:${ARTIF_PASSWORD} -T ./build.zip "https://artifactory.csc.com/artifactory/diaas-generic/graphtalk-standard-react/${BRANCH_NAME}/graphtalk-standard-react-bundle.${BRANCH_NAME}.zip"
                  '''
                }
            }
        }
        stage('Push Artifact to DEV') {
            when { branch 'development' }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'DIAAS-AWS-CLI',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    withAWS(role:"arn:aws:iam::665158502186:role/ISS_DIAAS_PowerUser"){
                        sh '''
                            aws s3 rm s3://dev.eu.standard.project/omnichannel/react/ --recursive
                            aws s3 cp ./build/ s3://dev.eu.standard.project/omnichannel/react/ --recursive
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh 'cd /'
                deleteDir()
            }
        }
    }
}
Boolean checkRepoName(repoName, hardcodeRepoName){
    if (hardcodeRepoName == repoName){
        return true
    }
    return false
}
